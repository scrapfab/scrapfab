;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name scrapfab.build, :imports nil, :requires {nodejs cljs.nodejs, cljs.nodejs cljs.nodejs, reagent reagent.core, reagent.core reagent.core, clojure.set clojure.set, core scrapfab.core, scrapfab.core scrapfab.core}, :uses {subset? clojure.set}, :defs {fs {:name scrapfab.build/fs, :file "src/scrapfab/build.cljs", :line 10, :column 1, :end-line 10, :end-column 12, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 10, :column 10, :end-line 10, :end-column 12}}, write-page! {:protocol-inline nil, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([url html])), :doc "Given a URL and the rendered HTML for that URL, write the webpage\n  to the file system."}, :name scrapfab.build/write-page!, :variadic false, :file "src/scrapfab/build.cljs", :end-column 18, :method-params ([url html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url html])), :doc "Given a URL and the rendered HTML for that URL, write the webpage\n  to the file system."}, url->path {:protocol-inline nil, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 14, :column 7, :end-line 14, :end-column 16, :arglists (quote ([url])), :doc "Converts the url of a page to a filename, relative to the root\n  directory of the site."}, :name scrapfab.build/url->path, :variadic false, :file "src/scrapfab/build.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Converts the url of a page to a filename, relative to the root\n  directory of the site."}, root-layout {:protocol-inline nil, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 35, :column 7, :end-line 35, :end-column 18, :arglists (quote ([body]))}, :name scrapfab.build/root-layout, :variadic false, :file "src/scrapfab/build.cljs", :end-column 18, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body]))}, -main {:protocol-inline nil, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 61, :column 7, :end-line 61, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name scrapfab.build/-main, :variadic true, :file "src/scrapfab/build.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, tagged-media? {:protocol-inline nil, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 22, :column 7, :end-line 22, :end-column 20, :arglists (quote ([tags media])), :doc "Returns true if all tags in given as the first argument are associated\n  with the media given as the second argument."}, :name scrapfab.build/tagged-media?, :variadic false, :file "src/scrapfab/build.cljs", :end-column 20, :method-params ([tags media]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tags media])), :doc "Returns true if all tags in given as the first argument are associated\n  with the media given as the second argument."}, page-media {:protocol-inline nil, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 28, :column 7, :end-line 28, :end-column 17, :arglists (quote ([{:keys [tags], :as page} media-library])), :doc "Given a site-map page value as the first argument and a seq of\n  media as the first argument, return a seq of media associated with\n  that page."}, :name scrapfab.build/page-media, :variadic false, :file "src/scrapfab/build.cljs", :end-column 17, :method-params ([p__41974 media-library]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [tags], :as page} media-library])), :doc "Given a site-map page value as the first argument and a seq of\n  media as the first argument, return a seq of media associated with\n  that page."}, mkdirp {:name scrapfab.build/mkdirp, :file "src/scrapfab/build.cljs", :line 12, :column 1, :end-line 12, :end-column 16, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 12, :column 10, :end-line 12, :end-column 16}}, render-page {:protocol-inline nil, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 42, :column 7, :end-line 42, :end-column 18, :arglists (quote ([layout url {:keys [render], :as page} media])), :doc "Given a site-map page value as the first argument and a seq of\n  media associated with the page as its second argument, return the\n  rendered body HTML of the page."}, :name scrapfab.build/render-page, :variadic false, :file "src/scrapfab/build.cljs", :end-column 18, :method-params ([layout url p__41979 media]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists (quote ([layout url {:keys [render], :as page} media])), :doc "Given a site-map page value as the first argument and a seq of\n  media associated with the page as its second argument, return the\n  rendered body HTML of the page."}, file-path {:name scrapfab.build/file-path, :file "src/scrapfab/build.cljs", :line 11, :column 1, :end-line 11, :end-column 19, :meta {:file "/Users/dmitry/programming/scrapfab/src/scrapfab/build.cljs", :line 11, :column 10, :end-line 11, :end-column 19}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:tags :site-map :layout :head :render :media-library :body :html}, :order [:tags :html :head :body :render :site-map :layout :media-library]}, :doc nil}